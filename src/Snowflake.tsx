/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations, useCubeTexture} from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useLoader} from "@react-three/fiber"
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import { useControls } from 'leva'


type GLTFResult = GLTF & {
  nodes: {
    Snowflake: THREE.Mesh
  }
  materials: {
    Ice: THREE.MeshPhysicalMaterial
  }
}


type ActionName = 'SnowflakeAction.001'
// type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function Snowflake(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials, animations } = useGLTF('/snowflake01.glb') as GLTFResult
  const group = useRef();
  const { actions } = useAnimations(animations, group)
  const [ armMap, colorMap, heightMap, normalMap] = useLoader(TextureLoader, [
    './textures/snow_field_aerial_arm_1k.jpg',
    './textures/snow_field_aerial_col_1k.jpg',
    './textures/snow_field_aerial_height_1k.jpg',
    './textures/snow_field_aerial_nor_gl_1k.jpg',
  ])

  useEffect(() => {
    console.log('actions', actions)
    // actions["SnowflakeAction.001"]?.play();
    Object.keys(actions).forEach((key) => {
      console.log('key', key)
      console.log('actions?[key]', actions?.[key])
      // actions?.[key].play()
    })
  })


  const texture = useCubeTexture(
    ["px.png", "nx.png", "py.png", "ny.png", "pz.png", "nz.png"],
    // { path: "cube-map/"}
    // { path: "peppermint-cube-map/"}
    // { path: "lago-cube-map/"}
    { path: "sky-cube-map/"}
  )

  // const materialProps = useControls({
  //   thickness: { value: 5, min: 0, max: 20 },
  //   roughness: { value: 0, min: 0, max: 1, step: 0.1 },
  //   clearcoat: { value: 1, min: 0, max: 1, step: 0.1 },
  //   clearcoatRoughness: { value: 0, min: 0, max: 1, step: 0.1 },
  //   transmission: { value: 1, min: 0.9, max: 1, step: 0.01 },
  //   ior: { value: 1.25, min: 1, max: 2.3, step: 0.05 },
  //   envMapIntensity: { value: 25, min: 0, max: 100, step: 1 },
  //   color: '#ffffff',
  //   attenuationTint: '#ffe79e',
  //   attenuationDistance: { value: 0, min: 0, max: 1 }
  // })
  
  
  return (
    <group  ref={group} {...props} dispose={null}>
      <group name="Scene">
        {/* {console.log('matierla.Ice', materials.Ice)} */}
        <mesh name="Snowflake" 
          // scale={[50, 50, 50]}
          geometry={nodes.Snowflake.geometry} 
          material={materials.Ice} 
          rotation={[0, -0.01, 0.02]}
          // position={[0, 0, -1500]}
          >
          {/* <meshStandardMaterial 
            map={colorMap} 
            // normalMap={normalMap} 
            // roughnessMap={heightMap} 
            // aoMap={armMap}
            /> */}
          <meshBasicMaterial
            envMap={texture}
          />
          {/* <meshPhysicalMaterial {...materialProps} /> */}

        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/snowflake01.glb')
